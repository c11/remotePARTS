% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fitGLS_partition.R
\name{part_csv}
\alias{part_csv}
\alias{part_data}
\title{Extract a partition from a csv file}
\usage{
part_csv(
  part_i,
  part_csv_path,
  part_mat,
  part_form,
  part_locvars = c("lng", "lat")
)

part_data(part_i, part_form, part_df, part_mat, part_locvars = c("lng", "lat"))
}
\arguments{
\item{part_i}{which partition to extract (integer)}

\item{part_csv_path}{path to csv file containing data}

\item{part_mat}{a matrix whose columns contain indices for a partition.}

\item{part_form}{formula to make the model matrix}

\item{part_locvars}{character vector of coordinate variable names. Default is c("lng", "lat)}

\item{part_df}{object that contains all the data}
}
\value{
a list with the following elements:

\describe{
    \item{\code{$y}}{the response vector of length \code{partsize}
    corresponding to parition i}
    \item{\code{$X}}{a model matrix for parition i}
    \item{\code{$coords}}{a matrix or data frame of spatial coordinates for
    partition i. The first column are x coordinates and the second are y
    coordinates}
}
}
\description{
Extract a partition from a csv file
}
\details{
\code{part_csv()} is meant to be used with \code{fitGLS.partition()}
}
\examples{
## using part_csv ----

n.pix = 30865 # pixels in AK_ndvi_common-land.csv
parts = sample_partitions(npix = n.pix, npart = 4, partsize = 1000)

data.file = system.file("extdata", "AK_ndvi_common-land.csv",
                        package = "remotePARTS")

A.out = part_csv(part_i = 1, part_csv_path = data.file, part_mat = parts,
                 part_form = "cls.coef ~ 0 + land")

# dimensions of A.out elements:
dim(A.out$V)
dim(A.out$X)
dim(A.out$X0)
length(A.out$y)

## using part_data and AK_ndvi_common-land.csv: ----

n.pix = 30865 # pixels in AK_ndvi_common-land.csv
parts = sample_partitions(npix = n.pix, npart = 4, partsize = 1000)
data.file = system.file("extdata", "AK_ndvi_common-land.csv",
                        package = "remotePARTS")
df = data.table::fread(data.file)

B.out = part_data(1, part_form = cls.coef ~ 0 + land, part_df = df, part_mat = parts)
}
\seealso{
[fitGLS.partition()]
}
